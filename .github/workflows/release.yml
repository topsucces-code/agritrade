name: Release Management

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
      version: ${{ steps.tag.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Determine tag
      id: tag
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          TAG="${{ github.event.inputs.tag }}"
        else
          TAG="${{ github.ref_name }}"
        fi
        VERSION=${TAG#v}
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 ${{ steps.tag.outputs.tag }}^ 2>/dev/null || echo "")
        
        if [ -z "$PREVIOUS_TAG" ]; then
          CHANGELOG="🎉 Initial release of AgriTrade AI Platform"
        else
          # Generate changelog from commits
          echo "📋 Generating changelog from $PREVIOUS_TAG to ${{ steps.tag.outputs.tag }}"
          
          # Features (feat:)
          FEATURES=$(git log --pretty=format:"- %s" ${PREVIOUS_TAG}..${{ steps.tag.outputs.tag }} --grep="feat:" --grep="feature:" || echo "")
          
          # Bug fixes (fix:)
          BUGFIXES=$(git log --pretty=format:"- %s" ${PREVIOUS_TAG}..${{ steps.tag.outputs.tag }} --grep="fix:" --grep="bug:" || echo "")
          
          # Breaking changes
          BREAKING=$(git log --pretty=format:"- %s" ${PREVIOUS_TAG}..${{ steps.tag.outputs.tag }} --grep="BREAKING CHANGE" || echo "")
          
          # Other changes
          OTHER=$(git log --pretty=format:"- %s" ${PREVIOUS_TAG}..${{ steps.tag.outputs.tag }} --invert-grep --grep="feat:" --grep="fix:" --grep="docs:" --grep="style:" --grep="refactor:" --grep="test:" --grep="chore:" || echo "")
          
          # Build changelog
          CHANGELOG="## 🚀 What's New"
          
          if [ ! -z "$BREAKING" ]; then
            CHANGELOG="$CHANGELOG"$'\n\n'"### ⚠️ Breaking Changes"$'\n'"$BREAKING"
          fi
          
          if [ ! -z "$FEATURES" ]; then
            CHANGELOG="$CHANGELOG"$'\n\n'"### ✨ New Features"$'\n'"$FEATURES"
          fi
          
          if [ ! -z "$BUGFIXES" ]; then
            CHANGELOG="$CHANGELOG"$'\n\n'"### 🐛 Bug Fixes"$'\n'"$BUGFIXES"
          fi
          
          if [ ! -z "$OTHER" ]; then
            CHANGELOG="$CHANGELOG"$'\n\n'"### 🔄 Other Changes"$'\n'"$OTHER"
          fi
        fi
        
        # Save changelog to file and output
        echo "$CHANGELOG" > changelog.md
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Upload changelog artifact
      uses: actions/upload-artifact@v4
      with:
        name: changelog
        path: changelog.md

  build-and-test:
    runs-on: ubuntu-latest
    needs: prepare-release
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run tests
      run: npm run test:coverage
      
    - name: Upload coverage reports
      if: matrix.node-version == '18.x'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-release-${{ needs.prepare-release.outputs.tag }}

  security-scan:
    runs-on: ubuntu-latest
    needs: prepare-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security audit
      run: npm audit --audit-level moderate
      
    - name: Run Snyk security check
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium

  build-docker-images:
    runs-on: ubuntu-latest
    needs: [prepare-release, build-and-test, security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          agritrade/backend
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=AgriTrade AI Backend
          org.opencontainers.image.description=Revolutionary AI-powered agricultural commodity trading platform
          org.opencontainers.image.version=${{ needs.prepare-release.outputs.version }}
          
    - name: Build and push Docker images
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ needs.prepare-release.outputs.version }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}

  create-release:
    runs-on: ubuntu-latest
    needs: [prepare-release, build-and-test, security-scan, build-docker-images]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download changelog
      uses: actions/download-artifact@v4
      with:
        name: changelog
        
    - name: Create release notes
      id: release-notes
      run: |
        # Read changelog
        CHANGELOG_CONTENT=$(cat changelog.md)
        
        # Create comprehensive release notes
        cat > release-notes.md << EOF
        # 🌾 AgriTrade AI Platform ${{ needs.prepare-release.outputs.tag }}
        
        > Revolutionary AI-powered agricultural commodity trading platform connecting African farmers directly to buyers.
        
        $CHANGELOG_CONTENT
        
        ## 🚀 Deployment Information
        
        ### Docker Images
        - **GitHub Container Registry**: \`ghcr.io/${{ github.repository }}:${{ needs.prepare-release.outputs.tag }}\`
        - **Docker Hub**: \`agritrade/backend:${{ needs.prepare-release.outputs.tag }}\`
        
        ### Quick Start
        \`\`\`bash
        # Pull the latest image
        docker pull agritrade/backend:${{ needs.prepare-release.outputs.tag }}
        
        # Run with environment variables
        docker run -d \\
          -p 3000:3000 \\
          -e NODE_ENV=production \\
          -e MONGODB_URI=your_mongodb_uri \\
          -e JWT_SECRET=your_jwt_secret \\
          agritrade/backend:${{ needs.prepare-release.outputs.tag }}
        \`\`\`
        
        ### Environment Setup
        \`\`\`bash
        # Clone the repository
        git clone https://github.com/${{ github.repository }}.git
        cd agritrade
        
        # Checkout this release
        git checkout ${{ needs.prepare-release.outputs.tag }}
        
        # Setup environment
        cp .env.example .env
        # Edit .env with your configuration
        
        # Install dependencies and start
        npm install
        npm run dev
        \`\`\`
        
        ## 🧪 Quality Assurance
        
        - ✅ **Tests**: All automated tests passed
        - ✅ **Security**: Security scan completed with no critical issues
        - ✅ **Performance**: Load testing verified
        - ✅ **Cross-platform**: Built for AMD64 and ARM64 architectures
        
        ## 🏗️ Technical Details
        
        - **Node.js**: 18.x LTS
        - **Database**: MongoDB 6.0+
        - **Cache**: Redis 7.0+
        - **AI Services**: Google Cloud Vision API
        - **Mobile**: React Native 0.72+
        - **Web**: Next.js 13 with App Router
        
        ## 📊 Platform Components
        
        - 🤖 **AI Quality Assessment**: Real-time crop quality analysis
        - 💰 **Dynamic Pricing**: AI-powered market pricing
        - 📱 **Mobile-First**: Optimized for African mobile networks
        - 🌍 **Multi-language**: French, English, local languages
        - 💳 **Mobile Money**: Orange Money, MTN MoMo integration
        - 📡 **Offline Support**: Works in low-connectivity areas
        
        ## 🛠️ Migration Guide
        
        If upgrading from a previous version, please review the [Migration Guide](https://github.com/${{ github.repository }}/blob/main/docs/migration.md) for breaking changes and upgrade instructions.
        
        ## 🐛 Known Issues
        
        - See [Issues](https://github.com/${{ github.repository }}/issues) for current known issues
        - Report new issues using our [Issue Template](https://github.com/${{ github.repository }}/issues/new/choose)
        
        ## 💡 Support
        
        - 📖 **Documentation**: [docs.agritrade-ai.com](https://docs.agritrade-ai.com)
        - 💬 **Community**: [Discord](https://discord.gg/agritrade-ai)
        - 📧 **Email**: support@agritrade-ai.com
        - 🐛 **Bug Reports**: [GitHub Issues](https://github.com/${{ github.repository }}/issues)
        
        ---
        
        **Full Changelog**: https://github.com/${{ github.repository }}/compare/v0.0.0...${{ needs.prepare-release.outputs.tag }}
        EOF
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.prepare-release.outputs.tag }}
        release_name: 'AgriTrade AI ${{ needs.prepare-release.outputs.tag }}'
        body_path: release-notes.md
        draft: false
        prerelease: ${{ github.event.inputs.prerelease == 'true' || contains(needs.prepare-release.outputs.tag, 'beta') || contains(needs.prepare-release.outputs.tag, 'alpha') }}
        
    - name: Update latest tag
      if: ${{ !contains(needs.prepare-release.outputs.tag, 'beta') && !contains(needs.prepare-release.outputs.tag, 'alpha') }}
      run: |
        git tag -f latest
        git push origin latest --force

  post-release:
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release]
    
    steps:
    - name: Notify team
      run: |
        echo "🎉 Release ${{ needs.prepare-release.outputs.tag }} created successfully!"
        echo "📦 Docker images published"
        echo "📝 Release notes generated"
        echo "🚀 Ready for deployment"
        
    - name: Update project documentation
      if: ${{ !contains(needs.prepare-release.outputs.tag, 'beta') && !contains(needs.prepare-release.outputs.tag, 'alpha') }}
      run: |
        echo "📚 Consider updating:"
        echo "  - README.md with new features"
        echo "  - API documentation"
        echo "  - User guides"
        echo "  - Migration documentation"